# MSX Serial Terminal - Cursor Editor Rules

## 言語とコミュニケーション
- 常に日本語で応答する
- コメントと文字列は日本語で記述する
- 変数名・関数名・クラス名は英語で記述する

## コード品質と保守性
- テストカバレッジは95%以上を維持する
- 新機能追加時は必ず対応するテストを作成する
- 複雑度はRadonでA評価（10未満）を維持する
- 関数の複雑度がC評価（15以上）になった場合は分割を検討する

## セキュリティ
- os.system()の使用を禁止し、subprocess.runを使用する
- Jinja2テンプレートではautoescape=Trueを必須とする
- 空のexcept文は禁止し、必ずログ記録またはエラーハンドリングを行う
- banditセキュリティチェックで高リスク問題を残さない

## コードスタイル
- 行長制限は120文字とする
- blackフォーマッターに準拠する
- flake8ルールに準拠する（E203は除外）
- isortでインポート文を整理する
- コミット前に必ずblackを適用してコードフォーマットを統一する
- `make format`または`black .`でプロジェクト全体をフォーマットする

## 表現と命名規則
- パフォーマンス関連の表現は具体的で測定可能な表現を使用する

## アーキテクチャと設計
- 設定値のハードコードを避け、ConfigManagerを使用する
- 新しい設定項目は必ずスキーマ検証を実装する
- 関数の実行時間測定にはProfilerデコレーターを使用する
- キャッシュが必要な処理にはCacheManagerを使用する

## Enum設計
- Enumの各項目がタプルを持つ場合、__init__メソッドの引数は展開して受け取る
- Enumのvalueプロパティは@propertyデコレーターで実装する
- Python 3.13のEnum仕様に準拠する

## テスト設計
- テストクラス名は「Test」で始める
- テストメソッド名は「test_」で始め、具体的な動作を表現する
- モックを使用する際は適切なスコープで設定する
- エラーケースのテストも必ず含める

## 開発ツール
- Makefileで品質チェックタスクを提供する
- CI/CDでテスト・型チェック・セキュリティチェックを自動化する
- 開発時は`make check-all`で全体品質を確認する
- コミット前にREADME.mdを更新し、変更内容を反映する

## パフォーマンス
- I/O処理では適応的遅延（adaptive delay）を実装する
- 大量データ処理ではチャンク処理を採用する
- メモリ使用量を意識したアルゴリズムを選択する

## エラーハンドリング
- 例外は具体的な型でキャッチする
- ユーザーに分かりやすいエラーメッセージを提供する
- ログレベルを適切に設定する（DEBUG, INFO, WARNING, ERROR, CRITICAL）

## 設定管理
- 設定ファイルはYAMLまたはJSONで管理する
- 設定項目には型、範囲、選択肢の制約を設ける
- 設定変更時は検証を実行する
- デフォルト値は明示的に定義する

## 互換性
- Python 3.9以上をサポートする
- 外部ライブラリの依存関係は最小限にする
- プラットフォーム固有の処理は適切に分岐する

## AI開発の透明性
- AI貢献度を適切に記録・開示する
- 人間による添削・調整の余地を残す
- コード生成時は既存のコードスタイルに合わせる
